//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "AFCMSMainResourceFetcherDelegate-Protocol.h"
#import "AFCMSSubResourceFetcherDelegate-Protocol.h"

@class AFCMSDataModel, AFCMSMainResourceFetcher, NSMutableArray, NSOperationQueue, NSString, NSTimer, UCAFObserverContainer;
@protocol IAFCMSAppInfoContext;

@interface AFCMSService : NSObject <AFCMSMainResourceFetcherDelegate, AFCMSSubResourceFetcherDelegate>
{
    _Bool _isReadyForUserDataClean;
    _Bool _hasFailureMainReq;
    id <IAFCMSAppInfoContext> _appInfoContext;
    UCAFObserverContainer *_observers;
    AFCMSDataModel *_dataModel;
    NSMutableArray *_configArray;
    NSOperationQueue *_commonDownloadQueue;
    NSOperationQueue *_wifiDownloadQueue;
    AFCMSMainResourceFetcher *_mainResFetcher;
    NSTimer *_updateTimer;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSTimer *updateTimer; // @synthesize updateTimer=_updateTimer;
@property(nonatomic) _Bool hasFailureMainReq; // @synthesize hasFailureMainReq=_hasFailureMainReq;
@property(retain, nonatomic) AFCMSMainResourceFetcher *mainResFetcher; // @synthesize mainResFetcher=_mainResFetcher;
@property(retain, nonatomic) NSOperationQueue *wifiDownloadQueue; // @synthesize wifiDownloadQueue=_wifiDownloadQueue;
@property(retain, nonatomic) NSOperationQueue *commonDownloadQueue; // @synthesize commonDownloadQueue=_commonDownloadQueue;
@property(retain, nonatomic) NSMutableArray *configArray; // @synthesize configArray=_configArray;
@property(retain, nonatomic) AFCMSDataModel *dataModel; // @synthesize dataModel=_dataModel;
@property(retain, nonatomic) UCAFObserverContainer *observers; // @synthesize observers=_observers;
@property(nonatomic) _Bool isReadyForUserDataClean; // @synthesize isReadyForUserDataClean=_isReadyForUserDataClean;
@property(retain, nonatomic) id <IAFCMSAppInfoContext> appInfoContext; // @synthesize appInfoContext=_appInfoContext;
- (void).cxx_destruct;
- (void)didEnterBackground;
- (void)willEnterForeground;
- (void)stopUpdateCheck;
- (void)startCheckUpdate;
- (void)onAppDidFinishLaunch;
- (void)removeUserDataForResCode:(id)arg1 exceptDataIDs:(id)arg2;
- (id)currentSumInfo;
- (_Bool)hasDownloading:(id)arg1;
- (void)CMSMainResourceFetcher:(id)arg1 didFailWithError:(id)arg2;
- (void)CMSMainResourceFetcher:(id)arg1 didFetchData:(id)arg2;
- (void)doCMSDataFullUpdates;
- (void)doCMSDataUpdate;
- (void)doCMSDataUpdate:(_Bool)arg1;
- (void)statisticsMainResUpdated:(id)arg1;
- (void)didCMSMainResUpdate:(id)arg1;
- (void)didCMSAllResUpdateWithData:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)notifySubResDownloadFail:(id)arg1;
- (void)notifySubResDownloadSucceed:(id)arg1;
- (void)notifyUpdate:(id)arg1;
- (void)notifyConfigResult:(id)arg1;
- (void)handleDownloadFailWithInfo:(id)arg1 config:(id)arg2;
- (void)CMSSubResourceFetcher:(id)arg1 didFailWithError:(id)arg2;
- (void)CMSSubResourceFetcher:(id)arg1 didFetchData:(id)arg2;
- (id)configWithUniqueID:(id)arg1;
- (_Bool)isConfigExistWithResCode:(id)arg1;
- (_Bool)isSubResExistWithInfo:(id)arg1 resCode:(id)arg2;
- (_Bool)internalDownload:(id)arg1;
- (void)downloadSubResByConfig:(id)arg1;
- (void)didNetworkStatusChange:(id)arg1;
- (void)clearAllCMSData;
- (void)removeSubResourceWithResCode:(id)arg1 exceptResources:(id)arg2;
- (void)removeResourceWithResCode:(id)arg1;
- (id)subResImageWithResCode:(id)arg1 subResUrl:(id)arg2 relativePath:(id)arg3;
- (id)subResPathWithResCode:(id)arg1 subResUrl:(id)arg2 relativePath:(id)arg3;
- (id)subResDataWithResCode:(id)arg1 subResUrl:(id)arg2 relativePath:(id)arg3;
- (id)mainResWithResCode:(id)arg1 type:(long long)arg2;
- (id)getParamConfigWithResCode:(id)arg1;
- (void)unregisterCMSServiceObserver:(id)arg1;
- (void)registerCMSServiceObserver:(id)arg1;
- (void)dealloc;
- (id)init;
- (void)setLoglevel:(unsigned long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

